#  .ebrc: przykładowy plik konfiguracyjny dla ebrowse

#  Konto email; możesz posiadać kilka.
#  Konto GMail, obecnie bardzo wiele osób je posiada.
#  Dostęp przez POP3. Aby pobrać i odczytać pocztę z tego konta użyj:
#  edbrowse -fm1
mail {
inserver = pop.gmail.com
outserver = smtp.gmail.com
secure
login = edbrowse
password = rhinoceros
from = Donald Duck
reply = edbrowse@gmail.com
}

#  Dostęp IMAP do Twojego konta GMail
#  Jeśli jest to drugie konto w Twojej konfiguracji, dostęp IMAP uzyskasz następująco:
#  edbrowse -f2
mail {
imap
inserver = imap.gmail.com
outserver = smtp.gmail.com
secure
login = edbrowse
password = rhinoceros
from = Donald Duck
reply = edbrowse@gmail.com
}

#  Dodaj książkę adresową.
#adbook=/home/mylogin/outside/adbook

#  Skrzynka odbiorcza. Powinna to być ścieżka bezwzględna.
#maildir = /home/mylogin/mbox

#  Tutaj umieszczaj pobrane pliki. Powinna to być ścieżka bezwzględna.
# downdir = /home/mylogin/downloads
# Jeśli brakuje tego parametru, ściągane pliki będą zapisane w bieżącej lokalizacji.

#  Tutaj składowane są ciastka HTTP (pliki cookie).
#jar = /home/mylogin/outside/cookies

# Katalog z pamięcią podręczną (cache) przeglądarki i rozmiar tej pamięci w megabajtach.
# cachedir = /b3/ebcache
# cachesize = 200

#  czekaj 30 sekund na odpowiedź serwera web
webtimer = 30
#  czekaj 3 minuty na odpowiedź serwera pocztowego
mailtimer = 180

#  Przekieruj pocztę na podstawie nadawcy lub adresata.
fromfilter {
fred flintstone > fredmail
fred.flintstone@bedrock.us > fredmail
jerk@hotmail.com > x
word@m-w.com > -wod
}

# tofilter { }

#  Opisz typy MIME i wtyczki do ich obsługi.
plugin {
type = audio/basic
desc = audio file in a wave format
suffix = wav,voc,au,ogg
content = audio/x-wav
#  %i to tymczasowy plik wejściowy wygenerowany przez edbrowse, lub adres URL
program = play -q %i
}

plugin {
type = audio/mp3
desc = audio file in mp3 format
suffix = mp3
content = audio/mpeg
program = mpg123 -q -C %i
}

plugin {
type = audio/x-pn-realaudio
desc = streaming audio
protocol = rtsp,pnm,sdp
suffix = rm,ra,ram,m3u8
urlmatch = youtube.com/watch?|youtube.com/embed/
content = audio/x-scpls,application/pls+xml
program = /usr/bin/mpv --really-quiet --load-unsafe-playlists %i
}

#  Ta wtyczka renderuje plik zamiast go "odtwarzać".
plugin {
type = pdf
desc = pdf file
suffix = pdf
content = application/pdf
program = pdftohtml -i -noframes %i %o >/dev/null
#  dane wyjściowe są w formacie HTML, zamiast tekstowym
outtype = H
#  dane muszą zostać pobrane; pdftohtml nie przyjmuje adresu URL
down_url
}

plugin {
type = rtf
desc = rich text file
suffix = rtf
content = application/rtf
down_url
program = catdoc %i
# to jest tekst, nie HTML
outtype = T
}

#  Za każdym razem gdy pobierasz stronę z internetu,
#  przeglądarka identyfikuje się przed hostem.
#  Poniżej lista kilku alternatywnych agentów, domyślna wartość to edbrowse
agent = Lynx/2.8.4rel.1 libwww-FM/2.14
agent = Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)

#  Jesteśmy gotowi by napisać nasz pierwszy skrypt.
#  Może funkcja komunikująca się z wyszukiwarką Google.
#  A więc   '<gg elephants tigers'   wywoła Google
#  z wyszukiwaniem frazy 'elephants tigers'
function+gg {
db0
b http://www.google.com
/<>/ i=~0
db1
/</ i1*
/h3/p
}

#  wyszukiwanie w słowniku Merriam-Webster, ~1 to parametr 1, wyszukiwane słowo.
#  <mw elephant
function+mw {
b http://www.merriam-webster.com/dictionary/~1
/spelling suggestion/X
if(?) {
/^h1/X
}
/./p
}

#  Ta funkcja jest uruchamiana przy starcie edbrowse.
function:init {
# nadaj prawo zapisu katalogom by móc usuwać pliki i zmieniać ich nazwy
dw
# Wyświetlaj rozmiar każdego pliku w listingu katalogów
ls=s
# Limit znaków przy wyświetlaniu wierszy; wiersze nie mają ograniczeń rzeczywistej długości.
ll 700
#  Nikt nie zna przeglądarki edbrowse.
}

# i wiele więcej...
